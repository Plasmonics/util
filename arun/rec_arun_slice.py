#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
TomoPy example script to reconstruct 2017-06/Stu data sets.
"""

from __future__ import print_function
import tomopy
import dxchange
import numpy as np

def read_aps_2bm_custom(fname, sino):

    # Read APS 2-BM raw data in temporary array to fix an acquisition error. 
    # All data (proj,dark and white) are stored in the proj array while flat/dark/theta arrays are invalid
    tproj, tflat, tdark, ttheta = dxchange.read_aps_2bm(fname, sino=sino)

    # Extracting from the tproj array proj, flat, dark and theta
    ndark = 10
    nflat = 10
    last_projection = tproj.shape[0] - nflat - ndark
    proj = tproj[0:last_projection, :, :]
    flat = tproj[last_projection:last_projection+nflat, :, :]
    dark = tproj[last_projection+nflat:last_projection+nflat+ndark, :, :]
    theta_size = proj.shape[0]
    theta = np.linspace(0. , np.pi, theta_size)
    
    return proj, flat, dark, theta
    
if __name__ == '__main__':

    # Set path to the micro-CT data to reconstruct.
    top = '/local/dataraid/Dinc/'

    # Auto generated dictionary by find_center to contain {exp_number : center of rotation}
    dictionary = {1: {"0001": 641.6}, 2: {"0002": 641.6}, 3: {"0003": 641.6}, 4: {"0004": 641.6}, 5: {"0005": 641.6}, 6: {"0006": 641.6}, 7: {"0007": 648.0}, 8: {"0008": 644.5}, 9: {"0009": 645.5}, 10: {"0010": 644.0},  
    11: {"0011": 644.5}, 12: {"0012": 648.0}, 13: {"0013": 648.0}, 14: {"0014": 647.3}, 15: {"0015": 647.5}, 16: {"0016": 648.0}, 17: {"0017": 648.5}, 18: {"0018": 646.5}, 19: {"0019": 648.0}, 20: {"0020": 648.3}, 
    21: {"0021": 648.4}, 22: {"0022": 648.5}, 23: {"0023": 648.5}, 24: {"0024": 648.5}, 25: {"0025": 648.5}, 26: {"0026": 648.5}, 27: {"0027": 648.5}, 28: {"0028": 648.5}, 29: {"0029": 648.5}, 30: {"0030": 648.5}, 
    31: {"0031": 648.5}, 32: {"0032": 648.5}, 33: {"0033": 648.5}, 34: {"0034": 648.5}, 35: {"0035": 648.5}, 36: {"0036": 648.5}, 37: {"0037": 648.5}, 38: {"0038": 648.5}, 39: {"0039": 648.5}, 40: {"0040": 648.5}, 
    41: {"0041": 648.5}, 42: {"0042": 648.5}, 43: {"0043": 648.5}, 44: {"0044": 648.5}, 45: {"0045": 648.5}, 46: {"0046": 648.5}, 47: {"0047": 648.5}, 48: {"0048": 648.5}, 49: {"0049": 648.5}, 50: {"0050": 648.5}, 
    51: {"0051": 648.5}, 52: {"0052": 648.5}, 53: {"0053": 648.5}, 54: {"0054": 648.5}, 55: {"0055": 648.5}, 56: {"0056": 648.5}, 57: {"0057": 648.8}, 58: {"0058": 648.3}, 59: {"0059": 649.0}, 60: {"0060": 640.5}, 
    61: {"0061": 639.0}, 62: {"0062": 644.5}, 63: {"0063": 644.5}, 64: {"0064": 645.5}, 65: {"0065": 645.5}, 66: {"0066": 645.5}, 67: {"0067": 645.5}, 68: {"0068": 645.5}, 69: {"0069": 645.5}, 70: {"0070": 645.5}, 
    71: {"0071": 645.5}, 72: {"0072": 645.5}, 73: {"0073": 645.5}, 74: {"0074": 645.5}, 75: {"0075": 645.5}, 76: {"0076": 645.5}, 77: {"0077": 645.5}, 78: {"0078": 645.5}, 79: {"0079": 645.5}, 80: {"0080": 645.5}, 
    81: {"0081": 645.5}, 82: {"0082": 645.5}, 83: {"0083": 645.5}, 84: {"0084": 645.5}, 85: {"0085": 645.5}, 86: {"0086": 645.5}, 87: {"0087": 645.5}, 88: {"0088": 645.5}, 89: {"0089": 645.5}, 90: {"0090": 645.5}, 
    91: {"0091": 645.5}, 92: {"0092": 645.5}, 93: {"0093": 645.5}, 94: {"0094": 645.5}, 95: {"0095": 645.5}, 96: {"0096": 645.5}, 97: {"0097": 645.5}, 98: {"0098": 645.5}, 99: {"0099": 646.5}, 100: {"0100": 645.5},   
    101: {"0101": 645.5}, 102: {"0102": 645.5}, 103: {"0103": 645.5}, 104: {"0104": 645.5}, 105: {"0105": 645.5}, 106: {"0106": 645.5}, 107: {"0107": 645.5}, 108: {"0108": 644.5}, 109: {"0109": 645.5}, 110: {"0110": 644.3}, 
    111: {"0111": 645.0}, 112: {"0112": 645.0}, 113: {"0113": 645.0}, 114: {"0114": 645.5}, 115: {"0115": 645.5}, 116: {"0116": 645.5}, 117: {"0117": 645.5}, 118: {"0118": 645.5}, 119: {"0119": 644.7}, 120: {"0120": 645.5},
    121: {"0121": 645.3}, 122: {"0122": 644.5}, 123: {"0123": 644.0}, 124: {"0124": 645.0}, 125: {"0125": 644.5}, 126: {"0126": 644.5}, 127: {"0127": 642.5}, 128: {"0128": 644.5}, 129: {"0129": 644.0}, 130: {"0130": 645.5}, 
        131: {"0131": 645.5}, 132: {"0132": 645.5}, 133: {"0133": 645.5}, 134: {"0134": 645.5}, 135: {"0135": 645.5}, 136: {"0136": 645.5}, 137: {"0137": 645.8}, 138: {"0138": 646.5}, 139: {"0139": 646.5}, 140: {"0140": 646.5}, 
        141: {"0141": 646.5}, 142: {"0142": 646.7}, 143: {"0143": 647.5}, 144: {"0144": 646.9}, 145: {"0145": 646.8}, 146: {"0146": 646.9}, 147: {"0147": 646.5}, 148: {"0148": 646.5}, 149: {"0149": 646.9}, 150: {"0150": 647.5}, 
        151: {"0151": 647.0}, 152: {"0152": 646.9}, 153: {"0153": 647.5}, 154: {"0154": 648.5}, 155: {"0155": 648.5}, 156: {"0156": 648.5}, 157: {"0157": 648.5}, 158: {"0158": 648.5}, 159: {"0159": 648.5}, 160: {"0160": 648.5}, 
        161: {"0161": 648.5}, 162: {"0162": 648.5}, 163: {"0163": 648.5}, 164: {"0164": 648.5}, 165: {"0165": 648.5}, 166: {"0166": 648.5}, 167: {"0167": 648.5}, 168: {"0168": 648.5}, 169: {"0169": 648.5}, 170: {"0170": 648.5}, 
        171: {"0171": 648.5}, 172: {"0172": 647.5}, 173: {"0173": 646.5}, 174: {"0174": 662.5}, 175: {"0175": 655.5}, 176: {"0176": 648.5}, 177: {"0177": 648.5}, 178: {"0178": 648.5}, 179: {"0179": 648.5}, 180: {"0180": 648.5}, 
        181: {"0181": 648.5}, 182: {"0182": 648.5}, 183: {"0183": 648.5}, 184: {"0184": 648.5}, 185: {"0185": 648.5}, 186: {"0186": 648.5}, 187: {"0187": 648.5}, 188: {"0188": 648.5}, 189: {"0189": 648.5}, 190: {"0190": 648.5}, 
        191: {"0191": 648.5}, 192: {"0192": 648.5}, 193: {"0193": 648.5}, 194: {"0194": 648.5}, 195: {"0195": 648.5}, 196: {"0196": 648.5}, 197: {"0197": 648.5}, 198: {"0198": 648.5}, 199: {"0199": 648.5}, 200: {"0200": 643.5},
        201: {"0201": 648.5}, 202: {"0202": 648.5}, 203: {"0203": 648.5}, 204: {"0204": 648.5}, 205: {"0205": 648.5}, 206: {"0206": 648.5}, 207: {"0207": 648.5}, 208: {"0208": 648.5}, 209: {"0209": 648.5}, 210: {"0210": 648.5}, 
        211: {"0211": 648.5}, 212: {"0212": 648.5}, 213: {"0213": 648.5}, 214: {"0214": 648.5}, 215: {"0215": 648.5}, 216: {"0216": 648.5}, 217: {"0217": 648.5}, 218: {"0218": 648.5}, 219: {"0219": 648.5}, 220: {"0220": 648.5}, 
        221: {"0221": 648.5}, 222: {"0222": 648.5}, 223: {"0223": 648.5}, 224: {"0224": 648.5}, 225: {"0225": 648.5}, 226: {"0226": 647.5}, 227: {"0227": 648.5}, 228: {"0228": 648.5}, 229: {"0229": 648.5}, 230: {"0230": 648.5}, 
        231: {"0231": 648.5}, 232: {"0232": 648.5}, 233: {"0233": 648.5}, 234: {"0234": 648.5}, 235: {"0235": 648.5}, 236: {"0236": 648.5}, 237: {"0237": 648.5}, 238: {"0238": 648.5}, 239: {"0239": 648.5}, 240: {"0240": 648.5}, 
        241: {"0241": 648.5}, 242: {"0242": 648.5}, 243: {"0243": 648.5}, 244: {"0244": 648.5}, 245: {"0245": 648.5}, 246: {"0246": 648.5}, 247: {"0247": 648.5}, 248: {"0248": 648.5}, 249: {"0249": 648.5}, 250: {"0250": 648.5}, 
        251: {"0251": 648.5}, 252: {"0252": 648.5}, 253: {"0253": 648.5}, 254: {"0254": 648.5}, 255: {"0255": 648.5}, 256: {"0256": 648.5}, 257: {"0257": 648.5}, 258: {"0258": 648.5}, 259: {"0259": 648.5}, 260: {"0260": 648.5}, 
        261: {"0261": 648.5}, 262: {"0262": 648.5}, 263: {"0263": 648.5}, 264: {"0264": 648.5}, 265: {"0265": 648.5}, 266: {"0266": 648.5}, 267: {"0267": 648.5}, 268: {"0268": 648.5}, 269: {"0269": 648.5}, 270: {"0270": 648.5}, 
        271: {"0271": 648.5}, 272: {"0272": 648.5}, 273: {"0273": 648.5}, 274: {"0274": 648.5}, 275: {"0275": 648.5}, 276: {"0276": 648.5}, 277: {"0277": 648.5}, 278: {"0278": 648.5}, 279: {"0279": 648.5}, 280: {"0280": 648.5}, 
        281: {"0281": 648.5}, 282: {"0282": 648.5}, 283: {"0283": 648.5}, 284: {"0284": 648.5}, 285: {"0285": 648.5}, 286: {"0286": 648.5}, 287: {"0287": 648.5}, 288: {"0288": 648.5}, 289: {"0289": 648.5}, 290: {"0290": 648.5}, 
        291: {"0291": 648.5}, 292: {"0292": 648.5}, 293: {"0293": 648.5}, 294: {"0294": 648.5}, 295: {"0295": 648.5}, 296: {"0296": 648.5}, 297: {"0297": 648.5}, 298: {"0298": 648.5}, 299: {"0299": 648.5}, 300: {"0300": 648.5},
        301: {"0301": 648.5}, 302: {"0302": 648.5}, 303: {"0303": 648.5}, 304: {"0304": 648.5}, 305: {"0305": 648.5}, 306: {"0306": 648.5}, 307: {"0307": 648.5}, 308: {"0308": 648.5}, 309: {"0309": 648.5}, 310: {"0310": 648.5}, 
        311: {"0311": 648.5}, 312: {"0312": 648.5}, 313: {"0313": 648.5}, 314: {"0314": 648.5}, 315: {"0315": 648.5}, 316: {"0316": 648.5}, 317: {"0317": 648.5}, 318: {"0318": 648.5}, 319: {"0319": 648.5}, 320: {"0320": 648.5}, 
        321: {"0321": 648.5}, 322: {"0322": 648.5}, 323: {"0323": 648.5}, 324: {"0324": 648.5}, 325: {"0325": 648.5}, 327: {"0327": 648.5}, 328: {"0328": 648.5}, 329: {"0329": 648.5}, 330: {"0330": 648.5}} 
        
    sample_detector_distance = 5       # Propagation distance of the wavefront in cm
    detector_pixel_size_x = 0.65e-4    # Detector pixel size in cm
    monochromator_energy = 27.0        # Energy of incident wave in keV
    alpha = 1e-02                      # Phase retrieval coeff.
    zinger_level = 1000                # Zinger level for projections
    zinger_level_w = 1000              # Zinger level for white
    
    for key in dictionary:
        dict2 = dictionary[key]
        for h5name in dict2:
            prefix = 'exp_'
            fname = top + prefix + h5name + '/proj_' + h5name + '.hdf'
            rot_center = dict2[h5name]
            print(fname, rot_center)

            # Select sinogram range to reconstruct.
            sino = None
            
            start = 1000
            end = 1001
            sino = (start, end)

            # Read APS 2-BM raw data.
            if (key > 6):            
                proj, flat, dark, theta = read_aps_2bm_custom(fname, sino=sino)
            else:
                proj, flat, dark, theta = dxchange.read_aps_2bm(fname, sino=sino)
            
            # zinger_removal
            proj = tomopy.misc.corr.remove_outlier(proj, zinger_level, size=15, axis=0)
            flat = tomopy.misc.corr.remove_outlier(flat, zinger_level_w, size=15, axis=0)

            # Flat-field correction of raw data.
            data = tomopy.normalize(proj, flat, dark, cutoff=1.4)

            # remove stripes
            #data = tomopy.remove_stripe_fw(data,level=5,wname='sym16',sigma=1,pad=True)
            ##data = tomopy.prep.stripe.remove_stripe_ti(data,alpha=7)
            ##data = tomopy.prep.stripe.remove_stripe_sf(data,size=51)

            # phase retrieval
            ##data = tomopy.prep.phase.retrieve_phase(data,pixel_size=detector_pixel_size_x,dist=sample_detector_distance,energy=monochromator_energy,alpha=alpha,pad=True)

            # Find rotation center
            #rot_center = tomopy.find_center(data, theta, init=rot_center, ind=start, tol=0.5)
            print(h5name, rot_center)

            data = tomopy.minus_log(data)

            # Reconstruct object using Gridrec algorithm.
            rec = tomopy.recon(data, theta, center=rot_center, algorithm='gridrec')

            # Mask each reconstructed slice with a circle.
            rec = tomopy.circ_mask(rec, axis=0, ratio=0.95)

            # Write data as stack of TIFs.
            ##fname = top +'full_rec/' + prefix + h5name + '/recon'
            fname = top +'slice_rec/' + prefix + h5name + '_recon'
            print("Rec: ", fname)
            dxchange.write_tiff_stack(rec, fname=fname)
